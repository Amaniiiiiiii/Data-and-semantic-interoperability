openapi: 3.0.0

# 1) Define the security scheme type (HTTP bearer)
components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
  schemas:
    Storey:
      type: object
      properties:
        id:
          type: integer
        floor:
          type: integer
        roomIDs:
          type: array
          items:
            type: integer
    Room:
      type: object
      properties:
        id:
          type: integer
        temperature:
          type: integer
        isAvailable:
          type: boolean
        windows:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              status:
                type: boolean
        heaters:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              status:
                type: boolean
      required:
        - id



# 2) Apply the security globally to all operations
security:
  - bearerAuth: []         # use the same name as above

info:
  title: Building Management API
  description: A set of APIs that provides date about buildings.
  version: 0.0.1

servers:
  - url: http//api.example.org/
    description: Production server

paths:
  /storeys:
    get:
      summary: Returns a list of all the storeys.
      # description: Optional extended description in CommonMark or HTML.
      parameters:
        - in: query
          name: size
          required: false
          schema:
            type: integer
            minimum: 1
          description: Page size
        - in: query
          name: page
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
      responses:
        '200':
          description: A list of all the storeys.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Storey'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Storey'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /storeys/{storeyID}/rooms:
    get:
      summary: Return a list of rooms that belong to the given storey.
      parameters:
        - in: path
          name: storeyID
          required: true
          schema:
            type: integer
            minimum: 1
          description: The storey ID
        - in: query
          name: size
          required: false
          schema:
            type: integer
            minimum: 1
          description: Page size
        - in: query
          name: page
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
      responses:
        '200':
          description: A list of all the storeys.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Room'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Room'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /storeys/{storeyID}/rooms/{roomID}/:
    get:
      summary: Return a set of data of the given room.
      parameters:
        - in: path
          name: storeyID
          required: true
          schema:
            type: integer
            minimum: 1
          description: The storey ID
        - in: path
          name: roomID
          required: true
          schema:
            type: integer
            minimum: 1
          description: The room ID
      responses:
        '200':
          description: A set of data of the given room.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
            application/xml:
              schema:
                $ref: '#/components/schemas/Room'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    put:
      summary: Update the status of devices in the given room.
      parameters:
        - in: path
          name: storeyID
          required: true
          schema:
            type: integer
            minimum: 1
          description: The storey ID
        - in: path
          name: roomID
          required: true
          schema:
            type: integer
            minimum: 1
          description: The room ID

      responses:
        '204':
          description: Successfully updated.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
